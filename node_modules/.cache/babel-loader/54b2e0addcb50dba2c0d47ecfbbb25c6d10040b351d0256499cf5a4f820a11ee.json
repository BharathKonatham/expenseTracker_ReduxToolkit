{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const transactionSlice = createSlice({\n  name: 'transaction',\n  initialState: {\n    transactions: []\n  },\n  reducers: {\n    deleteTransaction: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      console.log(state);\n      return {\n        ...state,\n        transactions: state.transactions.filter(transactions => transactions.id !== action.payload)\n      };\n    },\n    AddNewTransaction: (state, action) => {\n      return {\n        ...state,\n        transactions: [action.payload, ...state.transactions]\n      };\n    },\n    resetTransactions: (state, action) => {\n      return {\n        ...state,\n        transactions: action.payload\n      };\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  deleteTransaction,\n  AddNewTransaction,\n  resetTransactions\n} = transactionSlice.actions;\nexport default transactionSlice.reducer;","map":{"version":3,"names":["createSlice","transactionSlice","name","initialState","transactions","reducers","deleteTransaction","state","action","console","log","filter","id","payload","AddNewTransaction","resetTransactions","actions","reducer"],"sources":["C:/Users/C5155137/OneDrive - Conduent/React Development/Projects/expense_tracker/src/redux/transactionSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\n\r\nexport const transactionSlice = createSlice({\r\n  name: 'transaction',\r\n  initialState:{\r\n    transactions: []\r\n  },\r\n  reducers: {\r\n    deleteTransaction: (state,action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      console.log(state)\r\n      return {\r\n        ...state,\r\n        transactions:state.transactions.filter(transactions=>transactions.id !== action.payload)\r\n    }\r\n    },\r\n    AddNewTransaction: (state,action) => {\r\n        \r\n        return {\r\n            ...state,\r\n            transactions: [action.payload,...state.transactions]\r\n        }\r\n    },\r\n    resetTransactions: (state,action) => {\r\n        return{\r\n            ...state,\r\n            transactions:action.payload\r\n        }\r\n    },\r\n    \r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { deleteTransaction, AddNewTransaction, resetTransactions } = transactionSlice.actions\r\n\r\nexport default transactionSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C,OAAO,MAAMC,gBAAgB,GAAGD,WAAW,CAAC;EAC1CE,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAC;IACXC,YAAY,EAAE;EAChB,CAAC;EACDC,QAAQ,EAAE;IACRC,iBAAiB,EAAEA,CAACC,KAAK,EAACC,MAAM,KAAK;MACnC;MACA;MACA;MACA;MACAC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;MAClB,OAAO;QACL,GAAGA,KAAK;QACRH,YAAY,EAACG,KAAK,CAACH,YAAY,CAACO,MAAM,CAACP,YAAY,IAAEA,YAAY,CAACQ,EAAE,KAAKJ,MAAM,CAACK,OAAO;MAC3F,CAAC;IACD,CAAC;IACDC,iBAAiB,EAAEA,CAACP,KAAK,EAACC,MAAM,KAAK;MAEjC,OAAO;QACH,GAAGD,KAAK;QACRH,YAAY,EAAE,CAACI,MAAM,CAACK,OAAO,EAAC,GAAGN,KAAK,CAACH,YAAY;MACvD,CAAC;IACL,CAAC;IACDW,iBAAiB,EAAEA,CAACR,KAAK,EAACC,MAAM,KAAK;MACjC,OAAM;QACF,GAAGD,KAAK;QACRH,YAAY,EAACI,MAAM,CAACK;MACxB,CAAC;IACL;EAEF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEP,iBAAiB;EAAEQ,iBAAiB;EAAEC;AAAkB,CAAC,GAAGd,gBAAgB,CAACe,OAAO;AAEnG,eAAef,gBAAgB,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}