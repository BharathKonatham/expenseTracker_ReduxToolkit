{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  transactions: []\n};\nexport const transactionSlice = createSlice({\n  name: 'transations',\n  initialState,\n  reducers: {\n    deleteTransaction: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      return {\n        ...state,\n        transactions: state.transactions.filter(transactions => transactions.id !== action.payload)\n      };\n    },\n    AddNewTransaction: (state, action) => {\n      return {\n        ...state,\n        transactions: [action.payload, ...state.transactions]\n      };\n    },\n    resetTransactions: (state, action) => {\n      return {\n        ...state,\n        transactions: action.payload\n      };\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  deleteTransaction,\n  AddNewTransaction,\n  resetTransactions\n} = transactionSlice.actions;\nexport default transactionSlice.reducerc;","map":{"version":3,"names":["createSlice","initialState","transactions","transactionSlice","name","reducers","deleteTransaction","state","action","filter","id","payload","AddNewTransaction","resetTransactions","actions","reducerc"],"sources":["C:/Users/C5155137/OneDrive - Conduent/React Development/Projects/expense_tracker/src/redux/transactionSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n  transactions: []\r\n}\r\n\r\nexport const transactionSlice = createSlice({\r\n  name: 'transations',\r\n  initialState,\r\n  reducers: {\r\n    deleteTransaction: (state,action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      return {\r\n        ...state,\r\n        transactions:state.transactions.filter(transactions=>transactions.id !== action.payload)\r\n    }\r\n    },\r\n    AddNewTransaction: (state,action) => {\r\n        \r\n        return {\r\n            ...state,\r\n            transactions: [action.payload,...state.transactions]\r\n        }\r\n    },\r\n    resetTransactions: (state,action) => {\r\n        return{\r\n            ...state,\r\n            transactions:action.payload\r\n        }\r\n    },\r\n    \r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { deleteTransaction, AddNewTransaction, resetTransactions } = transactionSlice.actions\r\n\r\nexport default transactionSlice.reducerc"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,YAAY,EAAE;AAChB,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGH,WAAW,CAAC;EAC1CI,IAAI,EAAE,aAAa;EACnBH,YAAY;EACZI,QAAQ,EAAE;IACRC,iBAAiB,EAAEA,CAACC,KAAK,EAACC,MAAM,KAAK;MACnC;MACA;MACA;MACA;MACA,OAAO;QACL,GAAGD,KAAK;QACRL,YAAY,EAACK,KAAK,CAACL,YAAY,CAACO,MAAM,CAACP,YAAY,IAAEA,YAAY,CAACQ,EAAE,KAAKF,MAAM,CAACG,OAAO;MAC3F,CAAC;IACD,CAAC;IACDC,iBAAiB,EAAEA,CAACL,KAAK,EAACC,MAAM,KAAK;MAEjC,OAAO;QACH,GAAGD,KAAK;QACRL,YAAY,EAAE,CAACM,MAAM,CAACG,OAAO,EAAC,GAAGJ,KAAK,CAACL,YAAY;MACvD,CAAC;IACL,CAAC;IACDW,iBAAiB,EAAEA,CAACN,KAAK,EAACC,MAAM,KAAK;MACjC,OAAM;QACF,GAAGD,KAAK;QACRL,YAAY,EAACM,MAAM,CAACG;MACxB,CAAC;IACL;EAEF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEL,iBAAiB;EAAEM,iBAAiB;EAAEC;AAAkB,CAAC,GAAGV,gBAAgB,CAACW,OAAO;AAEnG,eAAeX,gBAAgB,CAACY,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}